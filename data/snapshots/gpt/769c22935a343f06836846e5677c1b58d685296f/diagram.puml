@startuml
skinparam classAttributeIconSize 0
left to right direction
class ApiGatewayApplication {
}
class CustomersServiceClient {
  + loadBalancedRestTemplate: RestTemplate
}
class OwnerDetails {
  + id: int
  + firstName: String
  + lastName: String
  + address: String
  + city: String
  + telephone: String
  + pets: List
}
class PetDetails {
  + id: int
  + name: String
  + birthDate: String
  + type: PetType
  + visits: List
}
class PetType {
  + name: String
}
class VisitDetails {
  + id: int
  + petId: int
  + date: String
  + description: String
}
class VisitsServiceClient {
  + loadBalancedRestTemplate: RestTemplate
}
class ApiGatewayController {
  + customersServiceClient: CustomersServiceClient
  + visitsServiceClient: VisitsServiceClient
}
class WebConfig {
}
class ConfigServerApplication {
}
class CustomersServiceApplication {
}
class Owner {
  + id: Integer
  + firstName: String
  + lastName: String
  + address: String
  + city: String
  + telephone: String
  + pets: Set
}
interface OwnerRepository {
}
class Pet {
  + id: Integer
  + name: String
  + birthDate: Date
  + type: PetType
  + owner: Owner
}
interface PetRepository {
}
class PetType {
  + id: Integer
  + name: String
}
class OwnerResource {
  + ownerRepository: OwnerRepository
}
class PetDetails {
  + id: long
  + name: String
  + owner: String
  + birthDate: Date
  + type: PetType
}
class PetRequest {
  + id: int
  + birthDate: Date
  + name: String
  + typeId: int
}
class PetResource {
  + petRepository: PetRepository
  + ownerRepository: OwnerRepository
}
class DiscoveryServerApplication {
}
class CallMonitoringAspect {
  + enabled: boolean
  + callCount: int
  + accumulatedCallTime: long
}
class Monitored {
}
class MonitoringConfig {
}
class ZipkinServer {
}
class VetsServiceApplication {
}
class Specialty {
  + id: Integer
  + name: String
}
class Vet {
  + id: Integer
  + firstName: String
  + lastName: String
  + specialties: Set
}
interface VetRepository {
}
class CacheConfig {
  + vetsProperties: VetsProperties
}
class VetsProperties {
  + cache: Cache
}
class VetResource {
  + vetRepository: VetRepository
}
class VisitsServiceApplication {
}
class Visit {
  + id: Integer
  + date: Date
  + description: String
  + petId: int
}
interface VisitRepository {
}
class VisitResource {
  + visitRepository: VisitRepository
}
ApiGatewayController --> CustomersServiceClient
ApiGatewayController --> VisitsServiceClient
CacheConfig --> VetsProperties
OwnerResource --> OwnerRepository
Pet --> Owner
Pet --> PetType
PetDetails --> PetType
PetResource --> OwnerRepository
PetResource --> PetRepository
VetResource --> VetRepository
VisitResource --> VisitRepository
@enduml